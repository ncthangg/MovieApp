// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using MovieApp.Data.Models;

namespace MovieApp.Data.DBContext;

public partial class MovieAppDBContext : DbContext
{
    public MovieAppDBContext()
    {
    }

    public MovieAppDBContext(DbContextOptions<MovieAppDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Actor> Actors { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Movie> Movies { get; set; }

    public virtual DbSet<MovieActor> MovieActors { get; set; }

    public virtual DbSet<MovieCategory> MovieCategories { get; set; }

    public virtual DbSet<MovieEpisode> MovieEpisodes { get; set; }

    public virtual DbSet<MovieRate> MovieRates { get; set; }

    public virtual DbSet<MovieSeason> MovieSeasons { get; set; }

    public virtual DbSet<MovieType> MovieTypes { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserLike> UserLikes { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<UserStatus> UserStatuses { get; set; }

    public virtual DbSet<UserToken> UserTokens { get; set; }

    public virtual DbSet<UserVerification> UserVerifications { get; set; }

    public virtual DbSet<UserWatchHistory> UserWatchHistories { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
   => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Actor>(entity =>
        {
            entity.HasKey(e => e.ActorId).HasName("PK__Actor__8332510B7B333B29");

            entity.ToTable("Actor");

            entity.Property(e => e.ActorId).HasColumnName("actorId");
            entity.Property(e => e.ActorName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("actorName");
            entity.Property(e => e.Bio).HasColumnName("bio");
            entity.Property(e => e.BirthDate).HasColumnName("birthDate");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__Category__23CAF1D866858356");

            entity.ToTable("Category");

            entity.Property(e => e.CategoryId).HasColumnName("categoryId");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("categoryName");
        });

        modelBuilder.Entity<Movie>(entity =>
        {
            entity.HasKey(e => e.MovieId).HasName("PK__Movie__42EB374E8AFB3CB4");

            entity.ToTable("Movie");

            entity.Property(e => e.MovieId).HasColumnName("movieId");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnName("description");
            entity.Property(e => e.Director)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("director");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.MovieName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("movieName");
            entity.Property(e => e.PosterUrl).HasColumnName("posterUrl");
            entity.Property(e => e.ReleaseYear).HasColumnName("releaseYear");
            entity.Property(e => e.TypeId).HasColumnName("typeId");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updatedAt");
            entity.Property(e => e.VideoUrl).HasColumnName("videoUrl");

            entity.HasOne(d => d.Type).WithMany(p => p.Movies)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("movie_type_typeid_foreign");
        });

        modelBuilder.Entity<MovieActor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Movie_Ac__3213E83F7852AF8E");

            entity.ToTable("Movie_Actor");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActorId).HasColumnName("actorId");
            entity.Property(e => e.MovieId).HasColumnName("movieId");

            entity.HasOne(d => d.Actor).WithMany(p => p.MovieActors)
                .HasForeignKey(d => d.ActorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("movie_actor_actorid_foreign");

            entity.HasOne(d => d.Movie).WithMany(p => p.MovieActors)
                .HasForeignKey(d => d.MovieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("movie_actor_movieid_foreign");
        });

        modelBuilder.Entity<MovieCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Movie_Ca__3213E83F299F0641");

            entity.ToTable("Movie_Category");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CategoryId).HasColumnName("categoryId");
            entity.Property(e => e.MovieId).HasColumnName("movieId");

            entity.HasOne(d => d.Category).WithMany(p => p.MovieCategories)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("movie_category_categoryid_foreign");

            entity.HasOne(d => d.Movie).WithMany(p => p.MovieCategories)
                .HasForeignKey(d => d.MovieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("movie_category_movieid_foreign");
        });

        modelBuilder.Entity<MovieEpisode>(entity =>
        {
            entity.HasKey(e => e.EpisodeId).HasName("PK__Movie_Ep__9C720D68C24A3F5E");

            entity.ToTable("Movie_Episode");

            entity.Property(e => e.EpisodeId).HasColumnName("episodeId");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnName("description");
            entity.Property(e => e.EpisodeName)
                .IsRequired()
                .HasColumnName("episodeName");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.PosterUrl).HasColumnName("posterUrl");
            entity.Property(e => e.SeasonId).HasColumnName("seasonId");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updatedAt");
            entity.Property(e => e.VideoUrl).HasColumnName("videoUrl");

            entity.HasOne(d => d.Season).WithMany(p => p.MovieEpisodes)
                .HasForeignKey(d => d.SeasonId)
                .HasConstraintName("movie_episode_movie_season_foreign");
        });

        modelBuilder.Entity<MovieRate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Movie_Ra__3213E83F2CF89292");

            entity.ToTable("Movie_Rate");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.MovieId).HasColumnName("movieId");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updatedAt");
            entity.Property(e => e.UserId).HasColumnName("userId");
            entity.Property(e => e.Vote).HasColumnName("vote");

            entity.HasOne(d => d.Movie).WithMany(p => p.MovieRates)
                .HasForeignKey(d => d.MovieId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("movie_rate_movieid_foreign");

            entity.HasOne(d => d.User).WithMany(p => p.MovieRates)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("movie_rate_userid_foreign");
        });

        modelBuilder.Entity<MovieSeason>(entity =>
        {
            entity.HasKey(e => e.SeasonId).HasName("PK__Movie_Se__BA85A62DFED2D8D2");

            entity.ToTable("Movie_Season");

            entity.Property(e => e.SeasonId).HasColumnName("seasonId");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.MovieId).HasColumnName("movieId");
            entity.Property(e => e.PosterUrl).HasColumnName("posterUrl");
            entity.Property(e => e.ReleaseYear).HasColumnName("releaseYear");
            entity.Property(e => e.SeasonName)
                .IsRequired()
                .HasColumnName("seasonName");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updatedAt");

            entity.HasOne(d => d.Movie).WithMany(p => p.MovieSeasons)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("movie_season_movie_foreign");
        });

        modelBuilder.Entity<MovieType>(entity =>
        {
            entity.HasKey(e => e.TypeId).HasName("PK__Movie_Ty__F04DF13ABAD24016");

            entity.ToTable("Movie_Type");

            entity.Property(e => e.TypeId).HasColumnName("typeId");
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("typeName");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__CB9A1CFFC28FBDBC");

            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "user_email_unique").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("userId");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.IsVerified).HasColumnName("isVerified");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Passwordhash)
                .IsRequired()
                .HasColumnName("passwordhash");
            entity.Property(e => e.RoleId).HasColumnName("roleId");
            entity.Property(e => e.StatusId).HasColumnName("statusId");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updatedAt");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_roleid_foreign");

            entity.HasOne(d => d.Status).WithMany(p => p.Users)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_statusid_foreign");
        });

        modelBuilder.Entity<UserLike>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User_Lik__3213E83F4D3F9D14");

            entity.ToTable("User_Like");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.MovieId).HasColumnName("movieId");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Movie).WithMany(p => p.UserLikes)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("user_like_movieid_foreign");

            entity.HasOne(d => d.User).WithMany(p => p.UserLikes)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_like_userid_foreign");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__User_Rol__CD98462AA6C11FA3");

            entity.ToTable("User_Role");

            entity.Property(e => e.RoleId).HasColumnName("roleId");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("roleName");
        });

        modelBuilder.Entity<UserStatus>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__User_Sta__36257A189E2801CE");

            entity.ToTable("User_Status");

            entity.Property(e => e.StatusId).HasColumnName("statusId");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("statusName");
        });

        modelBuilder.Entity<UserToken>(entity =>
        {
            entity.HasKey(e => e.TokenId).HasName("PK__User_Tok__AC16DB47E2F83942");

            entity.ToTable("User_Token");

            entity.HasIndex(e => e.UserId, "UQ__User_Tok__CB9A1CFE0B70DD73").IsUnique();

            entity.HasIndex(e => e.RefreshToken, "UQ__User_Tok__D771D24A9E05ACE5").IsUnique();

            entity.Property(e => e.TokenId).HasColumnName("tokenId");
            entity.Property(e => e.LastLogin)
                .HasColumnType("datetime")
                .HasColumnName("lastLogin");
            entity.Property(e => e.RefreshToken)
                .HasMaxLength(512)
                .HasColumnName("refreshToken");
            entity.Property(e => e.RefreshTokenExpires)
                .HasColumnType("datetime")
                .HasColumnName("refreshToken_Expires");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.User).WithOne(p => p.UserToken)
                .HasForeignKey<UserToken>(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("user_token_userid_foreign");
        });

        modelBuilder.Entity<UserVerification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User_Ver__3213E83FF3C6FDAF");

            entity.ToTable("User_Verification");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.ExpiresAt)
                .HasColumnType("datetime")
                .HasColumnName("expiresAt");
            entity.Property(e => e.IsUsed).HasColumnName("isUsed");
            entity.Property(e => e.UserId).HasColumnName("userId");
            entity.Property(e => e.VerificationCode)
                .IsRequired()
                .HasMaxLength(512)
                .HasColumnName("verificationCode");

            entity.HasOne(d => d.User).WithMany(p => p.UserVerifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_verification_userid_foreign");
        });

        modelBuilder.Entity<UserWatchHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User_Wat__3213E83FEAAB91AB");

            entity.ToTable("User_WatchHistory");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EpisodeId).HasColumnName("episodeId");
            entity.Property(e => e.LastWatch)
                .HasColumnType("datetime")
                .HasColumnName("lastWatch");
            entity.Property(e => e.MovieId).HasColumnName("movieId");
            entity.Property(e => e.SeasonId).HasColumnName("seasonId");
            entity.Property(e => e.TimeWatch).HasColumnName("timeWatch");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Episode).WithMany(p => p.UserWatchHistories)
                .HasForeignKey(d => d.EpisodeId)
                .HasConstraintName("user_watchhistory_episodeId_foreign");

            entity.HasOne(d => d.Movie).WithMany(p => p.UserWatchHistories)
                .HasForeignKey(d => d.MovieId)
                .HasConstraintName("user_watchhistory_movieid_foreign");

            entity.HasOne(d => d.Season).WithMany(p => p.UserWatchHistories)
                .HasForeignKey(d => d.SeasonId)
                .HasConstraintName("user_watchhistory_seasonId_foreign");

            entity.HasOne(d => d.User).WithMany(p => p.UserWatchHistories)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_watchhistory_userid_foreign");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}